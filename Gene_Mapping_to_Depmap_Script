library(dplyr)
library(readr)
library(stringr)
library(tidyr)

# File Paths (update these paths as needed)
genes_file   <- "path/to/gene_list.txt"
mrk_file     <- "path/to/MRK_List1.rpt"
hmd_file     <- "path/to/HMD_HumanPhenotype.rpt"
biomart_file <- "path/to/human_mouse_synonym.txt"
depmap_file  <- "path/to/depmap_all.txt"

# Create Output Folder
genes_dir <- dirname(normalizePath(genes_file))
create_out_folder <- function(base_dir) {
  today <- as.character(Sys.Date())
  out <- file.path(base_dir, today)
  i <- 1
  while (dir.exists(out)) {
    out <- file.path(base_dir, paste0(today, "_", i))
    i <- i + 1
  }
  dir.create(out)
  out
}
output_folder <- create_out_folder(genes_dir)

# Load Data
genes        <- read_lines(genes_file) %>% tolower() %>% trimws()
mrk          <- read_tsv(mrk_file, col_types = cols(.default = "c"))
hmd          <- read_tsv(hmd_file, col_names = c("Human", "x1", "Mouse", "MGI", "x2", "x3"), col_types = cols(.default = "c"))
bio          <- read_tsv(biomart_file, col_names = c("S1", "S2"), col_types = cols(.default = "c"))
depmap_genes <- read_lines(depmap_file) %>% tolower() %>% trimws()

# Standardize Text
mrk <- mrk %>% 
  mutate(`Marker Symbol` = tolower(trimws(`Marker Symbol`)),
         `Current Marker Symbol (if withdrawn)` = tolower(trimws(`Current Marker Symbol (if withdrawn)`)))
hmd <- hmd %>% 
  mutate(Human = tolower(trimws(Human)),
         Mouse = tolower(trimws(Mouse)))
bio <- bio %>% 
  mutate(S1 = tolower(trimws(S1)),
         S2 = tolower(trimws(S2)))

# Retrieve Synonyms from MRK & Biomart
syn_map <- mrk %>% select(`Marker Symbol`, `Current Marker Symbol (if withdrawn)`) %>% distinct()

mrk_syn <- sapply(genes, function(g) {
  alt <- syn_map %>% filter(`Marker Symbol` == g) %>% pull(`Current Marker Symbol (if withdrawn)`)
  if (length(alt) == 0) "NA" else paste(unique(alt[!is.na(alt)]), collapse = ", ")
})
bio_syn <- sapply(genes, function(g) {
  alt <- c(bio %>% filter(S1 == g) %>% pull(S2),
           bio %>% filter(S2 == g) %>% pull(S1))
  if (length(alt) == 0) "NA" else paste(unique(alt[!is.na(alt)]), collapse = ", ")
})

# Overall Orthologue Lookup (using original gene + synonyms)
human_ortho <- sapply(genes, function(g) {
  s1 <- if (mrk_syn[genes == g] == "NA") character(0) else unlist(str_split(mrk_syn[genes == g], ",\\s*"))
  s2 <- if (bio_syn[genes == g] == "NA") character(0) else unlist(str_split(bio_syn[genes == g], ",\\s*"))
  all_names <- unique(c(g, s1, s2))
  m <- hmd %>% filter(Mouse %in% all_names) %>% pull(Human)
  if (length(m) == 0) "NA" else paste(unique(m[!is.na(m)]), collapse = ", ")
})
mouse_ortho <- sapply(genes, function(g) {
  s1 <- if (mrk_syn[genes == g] == "NA") character(0) else unlist(str_split(mrk_syn[genes == g], ",\\s*"))
  s2 <- if (bio_syn[genes == g] == "NA") character(0) else unlist(str_split(bio_syn[genes == g], ",\\s*"))
  all_names <- unique(c(g, s1, s2))
  m <- hmd %>% filter(Human %in% all_names) %>% pull(Mouse)
  if (length(m) == 0) "NA" else paste(unique(m[!is.na(m)]), collapse = ", ")
})

# Orthologues based on synonyms only (for detailed output)
human_ortho_syn <- sapply(genes, function(g) {
  s1 <- if (mrk_syn[genes == g] == "NA") character(0) else unlist(str_split(mrk_syn[genes == g], ",\\s*"))
  s2 <- if (bio_syn[genes == g] == "NA") character(0) else unlist(str_split(bio_syn[genes == g], ",\\s*"))
  syn_only <- unique(c(s1, s2))
  if (length(syn_only) == 0) return("NA")
  m <- hmd %>% filter(Mouse %in% syn_only) %>% pull(Human)
  if (length(m) == 0) "NA" else paste(unique(m[!is.na(m)]), collapse = ", ")
})
mouse_ortho_syn <- sapply(genes, function(g) {
  s1 <- if (mrk_syn[genes == g] == "NA") character(0) else unlist(str_split(mrk_syn[genes == g], ",\\s*"))
  s2 <- if (bio_syn[genes == g] == "NA") character(0) else unlist(str_split(bio_syn[genes == g], ",\\s*"))
  syn_only <- unique(c(s1, s2))
  if (length(syn_only) == 0) return("NA")
  m <- hmd %>% filter(Human %in% syn_only) %>% pull(Mouse)
  if (length(m) == 0) "NA" else paste(unique(m[!is.na(m)]), collapse = ", ")
})

# Assemble Detailed Results
results <- data.frame(
    Gene              = genes,
    MRK_Synonym       = mrk_syn,
    BioMart_Synonym   = bio_syn,
    Human_Orthologue  = human_ortho,
    Mouse_Orthologue  = mouse_ortho,
    Human_Ort_SynOnly = human_ortho_syn,
    Mouse_Ort_SynOnly = mouse_ortho_syn,
    stringsAsFactors  = FALSE
)

results <- results %>% rowwise() %>% mutate(
    DepMap_Matches = {
        vals <- c(MRK_Synonym, BioMart_Synonym, Human_Orthologue, Mouse_Orthologue,
                  Human_Ort_SynOnly, Mouse_Ort_SynOnly)
        vals_split <- unlist(lapply(vals, function(x) {
            if (is.na(x) || x == "NA") character(0) else {
                out <- str_split(x, ",\\s*")[[1]]
                trimws(out[out != ""])
            }
        }))
        matches <- unique(vals_split[vals_split %in% depmap_genes])
        if (length(matches) == 0) "" else paste(matches, collapse = ", ")
    },
    Num_DepMap_Matches = {
        vals <- c(MRK_Synonym, BioMart_Synonym, Human_Orthologue, Mouse_Orthologue,
                  Human_Ort_SynOnly, Mouse_Ort_SynOnly)
        vals_split <- unlist(lapply(vals, function(x) {
            if (is.na(x) || x == "NA") character(0) else {
                out <- str_split(x, ",\\s*")[[1]]
                trimws(out[out != ""])
            }
        }))
        matches <- unique(vals_split[vals_split %in% depmap_genes])
        length(matches)
    }
) %>% ungroup()

write_csv(results, file.path(output_folder, "detailed_gene_mapping.csv"))

# Create Condensed DepMap-Matched Output
two_col <- results %>% 
    pivot_longer(
        cols = c(MRK_Synonym, BioMart_Synonym, Human_Orthologue, Mouse_Orthologue,
                 Human_Ort_SynOnly, Mouse_Ort_SynOnly),
        names_to = "Type", values_to = "Suggestion"
    ) %>% 
    separate_rows(Suggestion, sep = ",\\s*") %>% 
    mutate(Suggestion = trimws(Suggestion)) %>% 
    filter(Suggestion != "NA", Suggestion != "", !is.na(Suggestion)) %>% 
    distinct(Gene, Suggestion)

depmap_condensed <- two_col %>% 
    filter(Suggestion %in% depmap_genes) %>% 
    distinct(Gene, Suggestion) %>% 
    group_by(Gene) %>% 
    mutate(Num_Matches = n()) %>% 
    ungroup() %>% 
    rename(DepMap_Match = Suggestion)

all_genes <- tibble(Gene = genes)
depmap_condensed_full <- all_genes %>% 
    left_join(depmap_condensed, by = "Gene") %>% 
    mutate(
        Num_Matches = if_else(is.na(Num_Matches), 0L, Num_Matches),
        DepMap_Match = if_else(Num_Matches == 0, "", DepMap_Match)
    )

write_csv(depmap_condensed_full, file.path(output_folder, "condensed_depmap_mapping.csv"))

cat("Processing complete.\nOutput folder:", output_folder, "\n")
